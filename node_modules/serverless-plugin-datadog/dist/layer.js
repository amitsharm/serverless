"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var RuntimeType;
(function (RuntimeType) {
    RuntimeType[RuntimeType["NODE"] = 0] = "NODE";
    RuntimeType[RuntimeType["PYTHON"] = 1] = "PYTHON";
    RuntimeType[RuntimeType["UNSUPPORTED"] = 2] = "UNSUPPORTED";
})(RuntimeType = exports.RuntimeType || (exports.RuntimeType = {}));
exports.runtimeLookup = {
    "nodejs10.x": RuntimeType.NODE,
    "nodejs12.x": RuntimeType.NODE,
    "nodejs8.10": RuntimeType.NODE,
    "python2.7": RuntimeType.PYTHON,
    "python3.6": RuntimeType.PYTHON,
    "python3.7": RuntimeType.PYTHON,
    "python3.8": RuntimeType.PYTHON,
};
function findHandlers(service, defaultRuntime) {
    const funcs = service.functions;
    return Object.entries(funcs)
        .map(([name, handler]) => {
        let { runtime } = handler;
        if (runtime === undefined) {
            runtime = defaultRuntime;
        }
        if (runtime !== undefined && runtime in exports.runtimeLookup) {
            return { type: exports.runtimeLookup[runtime], runtime, name, handler };
        }
        return { type: RuntimeType.UNSUPPORTED, runtime, name, handler };
    })
        .filter((result) => result !== undefined);
}
exports.findHandlers = findHandlers;
function applyLayers(region, handlers, layers) {
    const regionRuntimes = layers.regions[region];
    if (regionRuntimes === undefined) {
        return;
    }
    for (const handler of handlers) {
        if (handler.type === RuntimeType.UNSUPPORTED) {
            continue;
        }
        const { runtime } = handler;
        const layerARN = runtime !== undefined ? regionRuntimes[runtime] : undefined;
        if (layerARN !== undefined) {
            const currentLayers = getLayers(handler);
            if (!new Set(currentLayers).has(layerARN)) {
                currentLayers.push(layerARN);
            }
            setLayers(handler, currentLayers);
        }
    }
}
exports.applyLayers = applyLayers;
function getLayers(handler) {
    const layersList = handler.handler.layers;
    if (layersList === undefined) {
        return [];
    }
    return layersList;
}
function setLayers(handler, layers) {
    handler.handler.layers = layers;
}
//# sourceMappingURL=layer.js.map